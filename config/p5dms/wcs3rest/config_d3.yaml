Connectors:
  d3: 
    defaults:
      repositoryId: ${config.env.d3_repositoryId}
      category: D0016
      mapping: 
        toD3:
          DocumentId: property_document_id
          docType: property_category
          2: 97
          3: 14
          8: 80 
          9: 21
          11: 54
          12: 82
          14: 28
          15: 55 
          23: 40
          34: 95 
          35: 93
          40: 85 
          41: 26
          50: 7
          52: 9
          63: 45
          67: 83
          68: 2

    baseUrl: ${config.env.baseURL}
    authorization: 
      type: Bearer 
      options:
        key: ${config.env.auth_bearer}
    connection:
      type: D3
      options: {}
    mappings: 
      d3SearchToWCS: |
        (
          $fromD3 := {
            "97": "2",
            "14": "3",
            "80": "8",
            "21": "9",
            "54": "11",
            "82": "12",
            "28": "14",
            "55": "15",
            "40": "23",
            "95": "34",
            "93": "35",
            "85": "40",
            "26": "41",
            "7": "50",
            "9": "52",
            "45": "63",
            "83": "67",
            "2": "68"
          };

          $convertStamp := function($stamp) { $toMillis($stamp) ~> $fromMillis('[M01]-[D01]-[Y0001] [H01]:[m01]:[s01]', '+0200') };
          $convertDate := function($d) { $toMillis($d, "[Y0001]-[M01]-[D01]") ~> $fromMillis("[D01].[M01].[Y0001]") };

          $.(
            $filename := displayProperties[id = "property_filename"].value; 
            $extension := displayProperties[id = "property_filetype"].value;
            $docType := { "key": "docType", "value": category.id };
            $f999 := { "key": "999", "value": category.id };
            $main := {
              "DocumentId": id,
              "dmsId": id,
              "mimeType": mimeType,
              "filename": $filename ? $filename : id & "." & $extension,
              "creationDate": $convertStamp(created) 
            }; 
    
            $merge([$main,
              {
                "properties": $append(
                  $docType,
                  displayProperties[id in $keys($fromD3)].{
                    "key": $lookup($fromD3,id),
                    "value": dataType = 3 ? $convertStamp(value) : dataType = 4 ? $convertDate(value) : value 
                  }) ~> $append($f999)
              }
            ])
          )
        )
      d3DetailsToWCS: |
        (
          $fromD3 := {
            "97": "2",
            "14": "3",
            "80": "8",
            "21": "9",
            "54": "11",
            "82": "12",
            "28": "14",
            "55": "15",
            "40": "23",
            "95": "34",
            "93": "35",
            "85": "40",
            "26": "41",
            "7": "50",
            "9": "52",
            "45": "63",
            "83": "67",
            "2": "68"
          };

          $convertStamp := function($stamp) { $toMillis($stamp) ~> $fromMillis('[Y0001]-[M01]-[D01] [H01]:[m01]:[s01]', '+0200') };
          $convertDate := function($d) { $toMillis($d, "[Y0001]-[M01]-[D01]") ~> $fromMillis("[D01].[M01].[Y0001]") };

          $.(
            $filename := systemProperties[id = "property_filename"].value; 
            $extension := systemProperties[id = "property_filetype"].value;
            $docType := { "key": "docType", "value": systemProperties[id = "property_category"].value };
            $f999 := { "key": "999", "value": systemProperties[id = "property_category"].value };
            $main := {
                "DocumentId": systemProperties[id = "property_document_id"].value,
                "dmsId": systemProperties[id = "property_document_id"].value,
                "mimeType": mimeType,
                "filename": $filename ? $filename : id & "." & $extension,
                "creationDate": $convertStamp(systemProperties[id = "property_creation_date"].value) 
            }; 
            
            $merge([
                $main,
                {
                    "properties": $append(
                        $docType,
                        objectProperties[id in $keys($fromD3)].{
                            "key": $lookup($fromD3, id), 
                            "value": dataType = 3 ? $convertStamp(value) : dataType = 4 ? $convertDate(value) : value 
                        }
                    )  ~> $append($f999)
                }
            ])
          )
        )

    wcsMethods:  
      test: 
        invoke:
          request: 
            url: /dms/r 
          transform: |
            = 
            {
                "message": "Repositories: " & $join(response.data.repositories.( $format("%s=%s",name,id) ), ", ")
            }
      searchContent:
        invoke:
          request: 
            url: = $format("/dms/r/%s/sr", _defaults.repositoryId)
            params: |
              = (
                  $soap := ($ ~> | soap.query.property | ( 
                    $key := "" & $lookup($$._defaults.mapping.toD3,key); 
                    { "key": $key ? $key : key }
                  ) |).soap;
    
                  $defs := [ $soap.query.property[key = 'property_category'].value]; 
                  $props := [ $soap.query.property[key != 'property_category'].{ key: [value] } ]; 

                  {
                    "objectdefinitionids": $count($defs) > 0 ? "" & $defs,
                    "properties": $count($props) > 0 ? "" & $merge($props)
                  }
    
                )              
          transform: = response.data.items
          mapping: d3SearchToWCS
          errors: 
            - condition: = response.status >= 400
              code: = response.status 
              message: = response.statusText & (response.data.details ? " - " & response.data.details)
            
      getContentDescription: 
        invoke:
          request: 
            url: = $format("/dms/r/%s/o2/%s", _defaults.repositoryId, soap.DocumentId)
          transform: = response.data
          mapping: d3DetailsToWCS
          errors:
            - condition: = response.status = 404
              code: = response.status 
              message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
            - condition: = response.status >= 400
              code: = response.status 
              message: = response.statusText

      getContentData: 
        invoke: 
          - request: 
              url: = $format("/dms/r/%s/o2/%s/preview",_defaults.repositoryId,soap.DocumentId)
            transform: |
              = {
                  "href": response.data.pdfInlineUri
                } 
            storeAs: props 
            errors:
              - condition: = response.status = 404
                code: = response.status 
                message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
              - condition: = response.status >= 400
                code: = response.status 
                message: = response.statusText
          - request: 
              url: = props.href
              params: {} 
              options: 
                responseType: buffer
            transform: 
              contentType: = $lookup(response.headers,'content-type')
              buffer: = response.data
            errors: 
              - condition: = response.status >= 400
                code: = response.status 
                message: = response.statusText

      updateProperties: 
        invoke: 
          - request: 
             url: = $format("/dms/r/%s/o2/%s", _defaults.repositoryId, soap.DocumentId)
            transform: |
              = {
               "category": response.data.systemProperties[id = "property_category"].value
              } 
            storeAs: ref
          - request:
             method: put 
             headers: 
               Origin: = _defaults.baseUrl
             url: = $format("/dms/r/%s/o2/%s", _defaults.repositoryId, soap.DocumentId)
             body: |
               = (
                  $dateToD3 :=  function($d) { $toMillis($d, "[D01].[M01].[Y0001]") ~> $fromMillis("[Y0001]-[M01]-[D01]") }; 
                  {
                   "sourceCategory": ref.category,
                   "sourceId": $format("/dms/r/%s/source", _defaults.repositoryId), 
                   "sourceProperties": {
                      "properties": [soap.contentProperties.( 
                        $kmap := $lookup($$._defaults.mapping.toD3, key); 
                        $value := $kmap in [9,7] ? [value.( $dateToD3($) )]  : value;
                        {"key": "" & $kmap, "values": $value }
                      )]                      
                   }
                 }
               )               
 
      addContent: 
        invoke: 
          - request: 
              method: post 
              headers: |
                = {
                    "Origin": _defaults.baseUrl,
                    "Content-Type": "application/octet-stream"
                  }
              url: = $format("/dms/r/%s/blob/chunk",_defaults.repositoryId)
              body: = soap.contentData.content
            transform: |
              = {
                 "location": $lookup(response.headers,'location')
               }
            storeAs: upload 
          - request: 
              method: post 
              headers: | 
                = {
                 "Origin": _defaults.baseUrl,
                 "Content-Type": "application/json"
                }
              url: = $format("/dms/r/%s/o2m", _defaults.repositoryId)
              body: |
                = (
                  $dateToD3 :=  function($d) { $toMillis($d, "[D01].[M01].[Y0001]") ~> $fromMillis("[Y0001]-[M01]-[D01]") }; 

                  $defaults := { 
                    "3": "test",
                    "68": "Eingangsrechnungen allgemein",
                    "52": $toMillis($now()) ~> $fromMillis('[Y0001]-[M01]-[D01]', '+0200'),
                    "40": "d3_exch",
                    "8": "de_exch"
                  };    

                  $soapkeys := [soap.contentDescription.properties.key];

                  $soapProps := soap.contentDescription.properties[key != "docType"].({"key": key, "values": value }); 

                  $buildDefaults := function() {
                      $each($defaults, function($v, $k) { { "key": $k, "values": [$v] } })[key in $soapkeys ~> $not]
                  }; 

                  $result := {
                    "filename": soap.contentDescription.filename,
                    "sourceCategory": _defaults.category,
                    "sourceId": $format("/dms/r/%s/source",_defaults.repositoryId),
                    "contentLocationUri": upload.location,
                    "sourceProperties": {
                      "properties": $append($soapProps,$buildDefaults()).(
                        $kmap := $lookup($$._defaults.mapping.toD3, key); 
                        $value := $kmap in [9,7] ? [values.( $dateToD3($) )]  : values;
                        {"key": "" & $kmap, "values": $value }
                      )
                    }
                  }; 
                
                  $result 
                )
            transform: |
              = {
                 "href": $lookup(response.headers,'location')
                }
            storeAs: update 
            errors:
              - condition: = response.status >= 400
                code: = response.status 
                message: |
                  =  $format("errCode=%s, propertyField=%s, reason=%s text=%s", response.data.errorCode, response.data.propertyFieldId, response.data.reason, response.statusText) 
          - request: 
              url: = update.href 
              headers: |
                = {
                 "Origin": _defaults.baseUrl"
                }
            transform: |
               = (
                   $convertStamp := function($stamp) { $toMillis($stamp) ~> $fromMillis('[Y0001]-[M01]-[D01] [H01]:[m01]:[s01]', '+0200') };               
                   
                   $result := {
                     "dmsId": response.data.id,
                     "creationDate": response.data.sourceProperties[key = "property_creation_date"].value ~> $convertStamp
                   };
                   
                   $result 
                  )
   
      supportsDelete: 
        invoke: 
          - request:
              url: /search
              params: 
                query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
                projection: id 
                limit: 1 
            transform: = response.data.rows[0].id
            errors: 
              - condition: = response.data.size = 0
                code: 404 
                message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
            storeAs: docId
          - transform: |
              = 
              { 
                "supported": false
              }
            
      delete: 
        invoke: 
          - request:
              url: /search
              params: 
                query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
                projection: id 
                limit: 1 
            transform: = response.data.rows[0].id
            errors: 
              - condition: = response.data.size = 0
                code: 404 
                message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
            storeAs: docId
          - request: 
              method: delete 
              url: $format("/doc/%s", docId)
              
