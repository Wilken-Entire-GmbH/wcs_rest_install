Connectors:
  p5dms: 
    defaults: {}
    baseUrl: ${config.env.baseURL}
    authorization: 
      type: Basic 
      options: 
        user: invoice 
        password: invoice
    connection:
      type: p5dms 
      options: 
        classifiers: [ 'invoice', 'ermInvoice', 'ermVoucher']
    mappings: 
      p5dmsToWCS: |
        (
          $main := data.backend.wcs.{
            "DocumentId": DocumentId,
            "mimeType": mimeType,
            "filename": filename,
            "creationDate": creationDate
          }; 

          $merge([ 
            { "dmsId": id}, 
            $main,
            { "properties": $keys(data.backend.wcs)[$not( $ in $keys($main))].{ "key": $, "value": $lookup($$.data.backend.wcs, $) } }
          ])      
        )
    wcsMethods:  
      test: 
        invoke: 
          transform: |
            = 
            {
              "message": "Restservice is alive"
            }

      searchContent:
        invoke: 
          request: 
            url: /search/paginated
            params: 
              query: |
                = 
                (
                  $v_i := function($v) { "[" & ($v ~> $split(',') ~> $map(function($v) { "'" & $v & "'"}) ~> $join(',')) & "]" }; 
                  $v_like := function($v) { "'%" & $v & "%'"}; 
                  $v_default := function($v) { "'" & $v & "'" }; 
                  $vals := {"~": $v_like,   "i": $v_i,   "_": $v_default };
                  $mapVals := function($o, $v) { $lookup($vals, $lookup($vals, $o) ? $o : "_")($v) }; 

                  $ops := { "~":"like", "=":"eq", "l":"lte", "g":"gte", ">":"gt", "!":"ne", "i":"in" };

                  $cond := function($v) {[ "data.backend.wcs." & $v.property.key,  $lookup($ops,$v.operator), $mapVals($v.operator, $v.property.value) ] ~> $join(' ') }; 

                  $format("%s and classifier in [ 'invoice', 'ermInvoice', 'ermVoucher']",soap.query.$cond($) ~> $join(' and '))
                )
              pagesize: |
                = soap.limit ? soap.limit : 100
              projection: data.backend.wcs 
              orderby: -createdate 
  
          transform: = response.data.rows
          mapping: p5dmsToWCS
            
      getContentDescription: 
        invoke:
          request: 
            url: /search
            params: 
              query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
              projection: data.backend.wcs 
              limit: 1
          transform: = response.data.rows[0]
          mapping: p5dmsToWCS
          errors:
            - condition: = response.data.size = 0
              code: 404 
              message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)

      getContentData: 
        invoke: 
          - request: 
              url: /search
              params: 
                query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
                projection: data.backend.wcs 
                limit: 1
            transform: = response.data.rows[0].id
            errors:
              - condition: = response.data.size = 0
                code: 404 
                message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
            storeAs: docId 
          - request: 
              url: = $format("/doc/%s/content", docId)
              params: {} 
              options: 
                responseType: buffer
            transform: 
              contentType: = $lookup(response.headers,'content-type')
              buffer: = response.data

      updateProperties: 
        invoke: 
          - request:
              url: /search
              params: 
                query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
                limit: 1 
            errors: 
              - condition: = response.data.size = 0
                code: 404
                message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
            transform: |
              = 
              response.data.rows[0].{
                  "id": id,
                  "version": version,
                  "objectType": objectType,
                  "data" : {
                    "backend": {
                      "wcs": data.backend.wcs
                    }
                  }
              }
            storeAs: updateData
          - request: 
              method: put
              url: = $format("/doc/%s", updateData.id)
              body: |
                = 
                (
                  $props := soap.contentProperties.{ key: $count([value]) < 2 ? [value][0] : value };

                  updateData ~> | data.backend.wcs |  $merge($props) |  
                )
              params:
                newVersion: true

      addContent: 
        invoke: 
          - request:
              url: /search
              params: 
                query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
                limit: 1 
            transform: |
              = 
              response.data.rows[0].{
                  "id": id,
                  "version": version,
                  "objectType": objectType,
                  "data" : {
                    "backend": {
                      "wcs": data.backend.wcs
                    }
                  }
              }
            storeAs: docExists
          - request: 
              method: post
              url: /doc
              body: |
                =
                { 
                  "data": {
                    "type": "data",
                    "content": {
                      "data": { 
                        "backend": {
                          "wcs": $merge(
                            [ $keys(soap.contentDescription)[$not( $ in ["properties"])].{ $:  $lookup($$.soap.contentDescription, $) } ] 
                              ~> $append(soap.contentDescription.properties.{ key: $count([value]) < 2 ? [value][0] : value })) 
                              ~> | $ | { "mimeType": $$.soap.contentData.mimeType ? $$.soap.contentData.mimeType : mimeType } |
                        }
                      }
                    }
                  },
                  "file": {
                    "type":"file",
                    "content": soap.contentData.content,
                    "contentType": soap.contentData.mimeType ? soap.contentData.mimeType : soap.contentDescription.mimeType,
                    "filename": soap.contentDescription.filename
                  }
                }
              params: 
                versionControl: true 
              options: 
                requestType: formdata
            transform: | 
              = 
              {
                "dmsId": response.data.id,
                "creationDate": response.data.createdate
              }

      supportsDelete: 
        invoke: 
          - request:
              url: /search
              params: 
                query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
                projection: id 
                limit: 1 
            transform: = response.data.rows[0].id
            errors: 
              - condition: = response.data.size = 0
                code: 404 
                message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
            storeAs: docId
          - transform: |
              = 
              { 
                "supported": true 
              }
            
      delete: 
        invoke: 
          - request:
              url: /search
              params: 
                query: = $format("data.backend.wcs.DocumentId == '%s'", soap.DocumentId) 
                projection: id 
                limit: 1 
            transform: = response.data.rows[0].id
            errors: 
              - condition: = response.data.size = 0
                code: 404 
                message: = $format("document with DocumentId %s not stored in DMS!", soap.DocumentId)
            storeAs: docId
          - request: 
              method: delete 
              url: $format("/doc/%s", docId)
              
