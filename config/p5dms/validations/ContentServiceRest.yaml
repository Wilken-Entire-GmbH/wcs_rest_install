definitions:
  $id: 'http://wilken.de/p5/schemas/wcs3Rest/defs'
  definitions:

    MappingColumnsConfig: 
      type: object 
      
    MappingConfig: 
      type: object 
      properties: 
        columns: { $ref: defs#/definitions/MappingColumnsConfig }
      additionalProperties: false 
      required: [ columns ]

    MethodRequestOptionsConfig: 
      type: object 
      properties: 
        requestType: { type: string, enum: [json, formdata], default: json }
        responseType: { type: string, enum: [json, buffer], default: json }
      additionalProperties: false 
            
    MethodRequestConfig: 
      type: object 
      properties: 
        method: { type: string, enum: [ get, post, put, delete ], default: get }
        url: { type: string }
        body: { type: [string, object]}
        params: { type: [object, string] , default: {} }
        headers: { type: [object, string] }
        options: { $ref: defs#/definitions/MethodRequestOptionsConfig, default: { responseType: json, requestType: json }}
      additionalProperties: false 
      required: [ url ]

    MethodResponseConfig: 
      type: object 
      properties: 
        transform: { type: string }
        mapping: { type: string }
      additionalProperties: false 
      required: [ transform, mapping ]

    MethodErrorConfig: 
      type: object 
      properties: 
        condition: { type: string }
        code: { type: string }
        message: { type: string }
        result: { type: string }
        customErrorHandling: { type: string }
      additionalProperties: false 
      required: [ condition, code, message ]

    MethodConfig: 
      type: object 
      properties: 
        request: { $ref: defs#/definitions/MethodRequestConfig }
        transform: { type: [string, object] }
        mapping: { type: [string, object] }
        errors: { type: array, items: { $ref: defs#/definitions/MethodErrorConfig } }
        storeAs: { type: string }
      additionalProperties: false 
      required: [ ]

    AuthBearerOptions:
      type: object
      properties:
        key: { type: string }
      required: [key]
      additionalProperties: false

    AuthSessionOptions:
      type: object
      properties:
        logonMethod: { type: string }
        user: { type: string }
        password: { type: string }
        encryptPassword: { type: string }
      required: [logonMethod, user]
      additionalProperties: false
      action_decrypt:
        - encryptPassword
        - password

    AuthBasicOptions:
      type: object
      properties:
        user: { type: string }
        password: { type: string }
        encryptPassword: { type: string }
      required: [user]
      additionalProperties: false
      action_decrypt:
        - encryptPassword
        - password

    AuthorizationConfig: 
      type: object 
      properties:
        type: { type: string }
        options: { type: object }
      oneOf:
        - properties:
            type: { type: string, const: Bearer }
            options: { $ref: defs#/definitions/AuthBearerOptions }
        - properties:
            type: { type: string, const: Session }
            options: { $ref: defs#/definitions/AuthSessionOptions }
        - properties:
            type: { type: string, const: Basic }
            options: { $ref: defs#/definitions/AuthBasicOptions }
      required: [type, options]
      additionalProperties: false

    ConnectionConfig: 
      type: object 

    MappingsConfig: 
      type: object 
    
    InvocationConfig: 
      type: object 
      properties: 
        invoke: 
          oneOf: 
            - $ref: defs#/definitions/MethodConfig
            - type: array 
              items: { $ref:  defs#/definitions/MethodConfig }
      additionalProperties: false 
      required: [ invoke ]

    GlobalMethodsConfig:
      type: object
      additionalProperties: { $ref: defs#/definitions/InvocationConfig }

    WcsMethodsConfig: 
      type: object
      properties: 
        test: { $ref: defs#/definitions/InvocationConfig }
        searchContent: { $ref: defs#/definitions/InvocationConfig }
        getContentData: { $ref: defs#/definitions/InvocationConfig }
        getContentDescription: { $ref: defs#/definitions/InvocationConfig }
        updateProperties: { $ref: defs#/definitions/InvocationConfig }
        addContent: { $ref: defs#/definitions/InvocationConfig }
        supportsDelete: { $ref: defs#/definitions/InvocationConfig }
        delete: { $ref: defs#/definitions/InvocationConfig }
      additionalProperties: true
      required:
        [test, searchContent, getContentData, getContentDescription, updateProperties, addContent, supportsDelete, delete]

    Entire2P5MethodsConfig:
      type: object
      properties:
        getContent: { $ref: defs#/definitions/InvocationConfig }
        getMeta: { $ref: defs#/definitions/InvocationConfig }
      additionalProperties: false 
      required: [getContent, getMeta]

    RestConnectorConfig: 
      type: object 
      properties: 
        defaults: { type: object }
        baseUrl: { type: string }
        authorization: { $ref: defs#/definitions/AuthorizationConfig }
        connection: { $ref: defs#/definitions/ConnectionConfig }
        mappings: { $ref: defs#/definitions/MappingsConfig }
        globalMethods: { $ref: defs#/definitions/GlobalMethodsConfig }
        wcsMethods: { $ref: defs#/definitions/WcsMethodsConfig }
        entire2P5Methods: { $ref: defs#/definitions/Entire2P5MethodsConfig }
      additionalProperties: false 
      required: [defaults, baseUrl, authorization, connection, mappings, globalMethods, wcsMethods]

    RestConnectorsConfig: 
      type: object 
      additionalProperties: { $ref: defs#/definitions/RestConnectorConfig }
  
schemas:
  ConfigFile:
    $id: 'http://wilken.de/p5/schemas/wcs3Rest/ConfigFile'
    $async: false
    type: object
    properties:
      Connectors: { $ref: defs#/definitions/RestConnectorsConfig }
    additionalProperties: false
